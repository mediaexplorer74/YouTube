<Page
    x:Class="YouTube.Video"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:YouTube"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    Background="Black">

    <Grid Background="Black">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Navbar at the top -->
        <local:navbar x:Name="navbar" Grid.Row="0"/>

        <!-- Main content area -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" x:Name="PlayerColumn"/>
                <ColumnDefinition Width="400" x:Name="RelatedColumn"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!-- Left part: player, info, description -->
            <ScrollViewer Grid.Column="0" VerticalScrollBarVisibility="Hidden">
                <StackPanel x:Name="PlayerInfoPanel" Margin="0">
                    <Grid x:Name="VideoPlayerContainer">
                        <MediaPlayerElement x:Name="VideoPlayer" 
                                         AreTransportControlsEnabled="True"
                                         Height="300"
                                         DoubleTapped="VideoPlayer_DoubleTapped"/>
                        <Grid x:Name="SkipOverlay" Visibility="Collapsed" Background="#80000000">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <FontIcon x:Name="SkipIcon" Glyph="&#xE111;" FontFamily="Segoe MDL2 Assets" FontSize="48" Foreground="White"/>
                                <TextBlock x:Name="SkipText" Text="10 seconds" Foreground="White" FontSize="24" Margin="10,0,0,0"/>
                            </StackPanel>
                        </Grid>
                    </Grid>

                    <ProgressRing x:Name="VideoInfoLoadingRing" IsActive="False" Visibility="Collapsed"/>
                    <TextBlock x:Name="VideoTitleText" Style="{StaticResource TitleTextBlockStyle}" TextWrapping="Wrap" Foreground="White"/>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <Border x:Name="ChannelPicture" Width="40" Height="40" Background="#333333" Tapped="ChannelPicture_Tapped">
                            <Image x:Name="ChannelImage" Stretch="UniformToFill"/>
                        </Border>
                        <StackPanel Margin="10,0,0,0">
                            <TextBlock x:Name="VideoAuthorText" Style="{StaticResource SubtitleTextBlockStyle}" Foreground="White"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock x:Name="VideoViewsText" Foreground="White"/>
                                <TextBlock Text=" • " Margin="10,0" Foreground="White"/>
                                <TextBlock x:Name="VideoUploadDateText" Foreground="White"/>
                                <Border x:Name="LikesPanel" 
                                        Background="#272727" 
                                        Padding="10,5" 
                                        Margin="10,0,0,0">
                                    <StackPanel Orientation="Horizontal">
                                        <SymbolIcon Symbol="Like" Foreground="White"/>
                                        <TextBlock x:Name="VideoLikesText" Margin="5,0,0,0" Foreground="White"/>
                                    </StackPanel>
                                </Border>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                    <Button x:Name="ShowDescriptionButton"
                            Content="Показать больше"
                            Click="ShowDescriptionButton_Click"
                            HorizontalAlignment="Stretch"
                            Margin="0,10,0,0"
                            Background="Black"
                            Foreground="White"
                            Padding="12,8"/>
                    <!-- Рекомендации для портретного режима -->
                    <StackPanel x:Name="RelatedPanelVertical" Visibility="Collapsed" Margin="0,20,0,0">
                        <ItemsControl x:Name="RelatedVideosContainerVertical">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Button Click="VideoCard_Click" Padding="0" Background="Transparent" Margin="0,0,0,10">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="180"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Image Source="{Binding Thumbnail}" Stretch="UniformToFill" Height="100"/>
                                            <StackPanel Grid.Column="1" Margin="10,0,0,0">
                                                <TextBlock Text="{Binding Title}" TextWrapping="Wrap" MaxLines="2" Foreground="White"/>
                                                <TextBlock Text="{Binding Author}" Opacity="0.7" Foreground="White"/>
                                                <StackPanel Orientation="Horizontal">
                                                    <TextBlock Text="{Binding Views}" Foreground="White"/>
                                                    <TextBlock Text=" • " Margin="10,0" Foreground="White"/>
                                                    <TextBlock Text="{Binding PublishedAt}" Foreground="White"/>
                                                </StackPanel>
                                            </StackPanel>
                                        </Grid>
                                    </Button>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                    <!-- Комментарии под описанием -->
                    <StackPanel x:Name="CommentsPanel" Margin="0,20,0,0" Visibility="Collapsed">
                        <TextBlock x:Name="CommentsHeader" Text="Комментарии" FontSize="18" FontWeight="Bold" Foreground="White"/>
                        <ItemsControl x:Name="CommentsList">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" Margin="0,10,0,10">
                                        <Border Width="36" Height="36" CornerRadius="18" Background="#333">
                                            <Image Source="{Binding AuthorThumbnail}" Stretch="UniformToFill"/>
                                        </Border>
                                        <StackPanel Margin="10,0,0,0">
                                            <TextBlock Text="{Binding Author}" Foreground="#AAA" FontWeight="Bold"/>
                                            <TextBlock Text="{Binding PublishedAt}" Foreground="#666" FontSize="12"/>
                                            <TextBlock Text="{Binding Text}" Foreground="White" TextWrapping="Wrap" MaxWidth="600"/>
                                        </StackPanel>
                                    </StackPanel>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </StackPanel>
            </ScrollViewer>

            <!-- Right part: related videos -->
            <ScrollViewer Grid.Column="1" Margin="0" x:Name="RelatedPanel" VerticalScrollBarVisibility="Hidden">
                <StackPanel>
                    <ItemsControl x:Name="RelatedVideosContainer">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Button Click="VideoCard_Click" Padding="0" Background="Transparent" Margin="0,0,0,10">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="180"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Image Source="{Binding Thumbnail}" Stretch="UniformToFill" Height="100"/>
                                        <StackPanel Grid.Column="1" Margin="10,0,0,0">
                                            <TextBlock Text="{Binding Title}" TextWrapping="Wrap" MaxLines="2" Foreground="White"/>
                                            <TextBlock Text="{Binding Author}" Opacity="0.7" Foreground="White"/>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding Views}" Foreground="White"/>
                                                <TextBlock Text=" • " Margin="10,0" Foreground="White"/>
                                                <TextBlock Text="{Binding PublishedAt}" Foreground="White"/>
                                            </StackPanel>
                                        </StackPanel>
                                    </Grid>
                                </Button>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    
                </StackPanel>
            </ScrollViewer>
        </Grid>

        <!-- Tabbar at the bottom -->
        <local:tabbar x:Name="tabbar" Grid.Row="2"/>
    </Grid>
</Page>





using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Windows.Storage;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Navigation;
using Newtonsoft.Json;
using Windows.UI.Core;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Input;
using Windows.System.Display;
using Windows.Media.Playback;
using Windows.Media.Core;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using YouTube.Models;

using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;

namespace YouTube
{
    public sealed partial class Video : Page, INotifyPropertyChanged
    {
        private readonly HttpClient _httpClient = new HttpClient();
        private string _apiBaseUrl = Config.ApiBaseUrl;
        private string _defaultQuality = Config.DefaultQuality;
        private DisplayRequest _displayRequest;
        private DispatcherTimer _skipOverlayTimer;
        private bool _isDoubleTapRight = true;
        private string _currentVideoId;
        private List<VideoInfo> _relatedVideos = new List<VideoInfo>();
        private int _relatedVideosPage = 0;
        private const int RELATED_VIDEOS_PER_PAGE = 10;
        private Frame _frame;
        private string _currentVideoDescription;
        private bool _isFullScreen = false;

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public Video()
        {
            this.InitializeComponent();
            _frame = Window.Current.Content as Frame;

            NavigationManager.InitializeTabBarNavigation(tabbar, _frame);
            NavigationManager.InitializeNavBarNavigation(navbar, _frame);

            this.Loaded += Video_Loaded;
            this.Unloaded += Video_Unloaded;

            _skipOverlayTimer = new DispatcherTimer();
            _skipOverlayTimer.Interval = TimeSpan.FromSeconds(2);
            _skipOverlayTimer.Tick += SkipOverlayTimer_Tick;

            Window.Current.SizeChanged += Window_SizeChanged;
        }

        private void Video_Loaded(object sender, RoutedEventArgs e)
        {
            SystemNavigationManager.GetForCurrentView().BackRequested += OnBackRequested;
            UpdateVideoPlayerLayout();

            if (!string.IsNullOrEmpty(_currentVideoId))
            {
                LoadVideo(_currentVideoId);
            }
        }

        private void Video_Unloaded(object sender, RoutedEventArgs e)
        {
            try
            {
                if (VideoPlayer.MediaPlayer != null)
                {
                    VideoPlayer.MediaPlayer.Pause();
                    VideoPlayer.Source = null;
                }

                if (_displayRequest != null)
                {
                    _displayRequest.RequestRelease();
                    _displayRequest = null;
                }

                SystemNavigationManager.GetForCurrentView().BackRequested -= OnBackRequested;
                Window.Current.SizeChanged -= Window_SizeChanged;
            }
            catch (Exception) { }
        }

        private void OnBackRequested(object sender, BackRequestedEventArgs e)
        {
            if (_isFullScreen)
            {
                // Exit fullscreen first
                ToggleFullScreen();
                e.Handled = true;
            }
            else if (_frame.CanGoBack)
            {
                e.Handled = true;
                _frame.GoBack();
            }
        }

        private void UpdateBackButtonVisibility()
        {
            SystemNavigationManager.GetForCurrentView().AppViewBackButtonVisibility =
                _frame.CanGoBack ? AppViewBackButtonVisibility.Visible : AppViewBackButtonVisibility.Collapsed;
        }

        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            base.OnNavigatedTo(e);

            try
            {
                if (e.Parameter != null)
                {
                    string videoId = e.Parameter.ToString();
                    if (!string.IsNullOrWhiteSpace(videoId))
                    {
                        LoadVideo(videoId);
                    }
                    else
                    {
                        _frame.Navigate(typeof(MainPage));
                    }
                }
                else
                {
                    _frame.Navigate(typeof(MainPage));
                }
            }
            catch (Exception ex)
            {
                _frame.Navigate(typeof(MainPage));
            }

            UpdateBackButtonVisibility();
        }

        private async void LoadVideo(string videoId)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(videoId))
                {
                    ShowErrorDialog("Video ID is missing");
                    return;
                }

                _currentVideoId = videoId;
                VideoInfoLoadingRing.IsActive = true;
                VideoInfoLoadingRing.Visibility = Visibility.Visible;

                var localSettings = ApplicationData.Current.LocalSettings;
                if (!localSettings.Values.ContainsKey("YouTubeApiKey"))
                {
                    ShowErrorDialog("YouTube API Key is missing");
                    return;
                }

                string apiKey = localSettings.Values["YouTubeApiKey"].ToString();
                string videoUrl = $"{_apiBaseUrl}get-ytvideo-info.php?video_id={videoId}&apikey={apiKey}";

                using (var client = new HttpClient())
                {
                    var response = await client.GetStringAsync(videoUrl);
                    var videoDetails = JsonConvert.DeserializeObject<VideoDetails>(response);

                    if (videoDetails != null && !string.IsNullOrEmpty(videoDetails.VideoUrl))
                    {
                        DisplayVideoInfo(videoDetails);
                        await LoadRelatedVideos();
                        await ViewHistory.AddToHistory(new VideoInfo
                        {
                            video_id = videoDetails.VideoId,
                            title = videoDetails.Title,
                            author = videoDetails.Author,
                            thumbnail = videoDetails.Thumbnail,
                            channel_thumbnail = videoDetails.ChannelThumbnail,
                            Views = FormatViewsCount(videoDetails.Views),
                            PublishedAt = videoDetails.PublishedAt
                        });
                    }
                    else
                    {
                        ShowErrorDialog("Failed to load video details");
                    }
                }
            }
            catch (HttpRequestException httpEx)
            {
                ShowErrorDialog("Network error loading video");
            }
            catch (JsonException jsonEx)
            {
                ShowErrorDialog("Error parsing video data");
            }
            catch (Exception ex)
            {
                ShowErrorDialog("Error loading video");
            }
            finally
            {
                VideoInfoLoadingRing.IsActive = false;
                VideoInfoLoadingRing.Visibility = Visibility.Collapsed;
            }
        }

        private async void ShowErrorDialog(string message)
        {
            try
            {
                await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, async () =>
                {
                    var dialog = new ContentDialog
                    {
                        Title = "Error",
                        Content = message,
                        PrimaryButtonText = "OK"
                    };
                    await dialog.ShowAsync();
                    _frame.Navigate(typeof(MainPage));
                });
            }
            catch (Exception) { }
        }

        private async Task LoadRelatedVideos()
        {
            try
            {
                var localSettings = ApplicationData.Current.LocalSettings;
                if (!localSettings.Values.ContainsKey("YouTubeApiKey"))
                {
                    return;
                }

                string apiKey = localSettings.Values["YouTubeApiKey"].ToString();
                string relatedUrl = $"{_apiBaseUrl}get_related_videos.php?video_id={_currentVideoId}&page={_relatedVideosPage}&apikey={apiKey}";

                using (var client = new HttpClient())
                {
                    var response = await client.GetStringAsync(relatedUrl);
                    var videos = JsonConvert.DeserializeObject<List<VideoInfo>>(response);

                    if (videos != null)
                    {
                        _relatedVideos.AddRange(videos);
                        RelatedVideosContainer.ItemsSource = null;
                        RelatedVideosContainer.ItemsSource = _relatedVideos;
                        RelatedVideosContainerVertical.ItemsSource = null;
                        RelatedVideosContainerVertical.ItemsSource = _relatedVideos;
                    }
                }
            }
            catch (Exception) { }
        }

        private void DisplayVideoInfo(VideoDetails video)
        {
            VideoTitleText.Text = video.Title;
            VideoAuthorText.Text = video.Author;
            _currentVideoDescription = video.Description;
            VideoViewsText.Text = FormatViewsCount(video.Views);
            VideoUploadDateText.Text = video.PublishedAt;
            VideoLikesText.Text = FormatViewsCount(video.Likes);

            if (!string.IsNullOrEmpty(video.ChannelThumbnail))
            {
                ChannelImage.Source = new Windows.UI.Xaml.Media.Imaging.BitmapImage(new Uri(video.ChannelThumbnail));
            }

            var mediaSource = MediaSource.CreateFromUri(new Uri(video.VideoUrl));
            VideoPlayer.Source = mediaSource;
            VideoPlayer.MediaPlayer.Play();

            if (video.Comments != null && video.Comments.Count > 0)
            {
                CommentsPanel.Visibility = Visibility.Visible;
                CommentsList.ItemsSource = video.Comments;
            }
            else
            {
                CommentsPanel.Visibility = Visibility.Collapsed;
            }

            RequestDisplayKeepOn();
        }

        private string FormatViewsCount(long views)
        {
            if (views >= 1000000)
            {
                return $"{views / 1000000.0:F1}M";
            }
            else if (views >= 1000)
            {
                return $"{views / 1000.0:F1}K";
            }
            return views.ToString();
        }

        private void RequestDisplayKeepOn()
        {
            if (_displayRequest == null)
            {
                _displayRequest = new DisplayRequest();
            }
            _displayRequest.RequestActive();
        }

        private void VideoPlayer_DoubleTapped(object sender, DoubleTappedRoutedEventArgs e)
        {
            try
            {
                if (VideoPlayer.MediaPlayer == null) return;

                var tapPosition = e.GetPosition(VideoPlayer);
                var playerWidth = VideoPlayer.ActualWidth;
                bool isRightSide = tapPosition.X > playerWidth / 2;
                int skipSeconds = isRightSide ? 10 : -10;

                var currentPosition = VideoPlayer.MediaPlayer.Position;
                var newPosition = currentPosition.Add(TimeSpan.FromSeconds(skipSeconds));

                if (newPosition < TimeSpan.Zero)
                    newPosition = TimeSpan.Zero;
                else if (newPosition > VideoPlayer.MediaPlayer.NaturalDuration)
                    newPosition = VideoPlayer.MediaPlayer.NaturalDuration;

                VideoPlayer.MediaPlayer.Position = newPosition;

                SkipOverlay.Visibility = Visibility.Visible;
                SkipIcon.Glyph = skipSeconds > 0 ? "\uE111" : "\uE112";
                SkipText.Text = $"{Math.Abs(skipSeconds)} seconds";
                _skipOverlayTimer.Start();
            }
            catch (Exception) { }
        }

        private void SkipOverlayTimer_Tick(object sender, object e)
        {
            SkipOverlay.Visibility = Visibility.Collapsed;
            _skipOverlayTimer.Stop();
        }

        private async void ShowDescriptionButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(_currentVideoDescription))
            {
                var dialog = new ContentDialog
                {
                    Title = "Описание",
                    Content = new ScrollViewer
                    {
                        Content = new TextBlock
                        {
                            Text = _currentVideoDescription,
                            TextWrapping = TextWrapping.Wrap,
                            Foreground = new SolidColorBrush(Windows.UI.Colors.White)
                        },
                        MaxHeight = 400
                    },
                    PrimaryButtonText = "Закрыть",
                    Background = new SolidColorBrush(Windows.UI.Colors.Black)
                };

                dialog.RequestedTheme = ElementTheme.Dark;
                await dialog.ShowAsync();
            }
        }

        private void VideoCard_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var button = sender as Button;
                if (button != null && button.DataContext != null)
                {
                    var videoInfo = button.DataContext as VideoInfo;
                    if (videoInfo != null && !string.IsNullOrEmpty(videoInfo.video_id))
                    {
                        _frame.Navigate(typeof(Video), videoInfo.video_id);
                    }
                }
            }
            catch (Exception) { }
        }

        private void ChannelPicture_Tapped(object sender, TappedRoutedEventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(VideoAuthorText.Text))
                {
                    _frame.Navigate(typeof(Channel), VideoAuthorText.Text);
                }
            }
            catch (Exception) { }
        }

        private void Window_SizeChanged(object sender, Windows.UI.Core.WindowSizeChangedEventArgs e)
        {
            UpdateVideoPlayerLayout();
        }

        private void UpdateVideoPlayerLayout()
        {
            var windowWidth = Window.Current.Bounds.Width;
            var windowHeight = Window.Current.Bounds.Height;
            bool isPortrait = windowHeight > windowWidth;

            if (isPortrait)
            {
                // Portrait mode - exit fullscreen if needed
                if (_isFullScreen)
                {
                    ToggleFullScreen();
                }

                PlayerColumn.Width = new GridLength(1, GridUnitType.Star);
                RelatedColumn.Width = new GridLength(0);
                RelatedPanel.Visibility = Visibility.Collapsed;
                RelatedPanelVertical.Visibility = Visibility.Visible;
                VideoPlayer.Height = windowWidth * 0.5625;
            }
            else
            {
                // Landscape mode - enter fullscreen automatically
                if (!_isFullScreen)
                {
                    ToggleFullScreen();
                }

                PlayerColumn.Width = new GridLength(1, GridUnitType.Star);
                RelatedColumn.Width = new GridLength(400);
                RelatedPanel.Visibility = Visibility.Visible;
                RelatedPanelVertical.Visibility = Visibility.Collapsed;
                VideoPlayer.Height = 300;
            }
        }

        private void ToggleFullScreen()
        {
            if (VideoPlayer.MediaPlayer == null) return;

            _isFullScreen = !_isFullScreen;

            if (_isFullScreen)
            {
                // Enter fullscreen
                VideoPlayer.AreTransportControlsEnabled = true;
                VideoPlayer.IsFullWindow = true;

                // Hide other UI elements
                navbar.Visibility = Visibility.Collapsed;
                tabbar.Visibility = Visibility.Collapsed;
                RelatedPanel.Visibility = Visibility.Collapsed;
                RelatedPanelVertical.Visibility = Visibility.Collapsed;
                PlayerInfoPanel.Margin = new Thickness(0);
            }
            else
            {
                // Exit fullscreen
                VideoPlayer.IsFullWindow = false;

                // Show other UI elements
                navbar.Visibility = Visibility.Visible;
                tabbar.Visibility = Visibility.Visible;

                // Update layout based on orientation
                var windowWidth = Window.Current.Bounds.Width;
                var windowHeight = Window.Current.Bounds.Height;
                bool isPortrait = windowHeight > windowWidth;

                if (isPortrait)
                {
                    RelatedPanel.Visibility = Visibility.Collapsed;
                    RelatedPanelVertical.Visibility = Visibility.Visible;
                }
                else
                {
                    RelatedPanel.Visibility = Visibility.Visible;
                    RelatedPanelVertical.Visibility = Visibility.Collapsed;
                }

                PlayerInfoPanel.Margin = new Thickness(0);
            }
        }
    }

    public class VideoInfo
    {
        [JsonProperty("video_id")]
        public string video_id { get; set; }

        [JsonProperty("title")]
        public string title { get; set; }

        [JsonProperty("author")]
        public string author { get; set; }

        [JsonProperty("thumbnail")]
        public string thumbnail { get; set; }

        [JsonProperty("channel_thumbnail")]
        public string channel_thumbnail { get; set; }

        [JsonProperty("views")]
        public string Views { get; set; }

        [JsonProperty("published_at")]
        public string PublishedAt { get; set; }

        // Properties for XAML binding
        public string Title => title;
        public string Author => author;
        public string Thumbnail => thumbnail;
        public string ChannelThumbnail => channel_thumbnail;
    }

    public class VideoDetails
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("video_id")]
        public string VideoId { get; set; }

        [JsonProperty("embed_url")]
        public string EmbedUrl { get; set; }

        [JsonProperty("duration")]
        public string Duration { get; set; }

        [JsonProperty("published_at")]
        public string PublishedAt { get; set; }

        [JsonProperty("likes")]
        public long Likes { get; set; }

        [JsonProperty("views")]
        public long Views { get; set; }

        [JsonProperty("comment_count")]
        public int CommentCount { get; set; }

        [JsonProperty("comments")]
        public List<Comment> Comments { get; set; }

        [JsonProperty("channel_thumbnail")]
        public string ChannelThumbnail { get; set; }

        [JsonProperty("thumbnail")]
        public string Thumbnail { get; set; }

        [JsonProperty("video_url")]
        public string VideoUrl { get; set; }
    }

    public class Comment
    {
        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("published_at")]
        public string PublishedAt { get; set; }

        [JsonProperty("author_thumbnail")]
        public string AuthorThumbnail { get; set; }
    }
}